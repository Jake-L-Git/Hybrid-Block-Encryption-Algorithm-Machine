{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #####################################\
############ DECRYPTION #############\
#####################################\
\
\
# first we need to create a function to invert our s-boxes, as the first step will be inserting our\
# cypher text back through these s-boxes\
def invert_s_box(s_box):\
        inverse_s_box = [[0] * len(s_box[0]) for _ in range(len(s_box))]\
\
        # iterate through each row and column of the S-box\
        for row_index in range(len(s_box)):\
            for col_index in range(len(s_box[row_index])):\
                # the value in the sbox tells us the column of the inverse sbox\
                value = s_box[row_index][col_index]\
                inverse_s_box[row_index][value] = col_index\
        \
        return inverse_s_box\
\
sbox1_invt = invert_s_box(sbox1)\
sbox2_invt = invert_s_box(sbox2)\
sbox3_invt = invert_s_box(sbox3)\
sbox4_invt = invert_s_box(sbox4)\
sbox5_invt = invert_s_box(sbox5)\
sbox6_invt = invert_s_box(sbox6)\
sbox7_invt = invert_s_box(sbox7)\
sbox8_invt = invert_s_box(sbox8)\
\
#storing our inverted s_boxes in a list for easy access\
inverse_sboxes = [sbox1_invt, sbox2_invt, sbox3_invt,sbox4_invt,sbox5_invt,sbox6_invt,sbox7_invt,sbox8_invt]\
\
#now, we insert our cypher text back through the inverse s-boxes, this is supposed to undo the shuffling\
# caused by them and transform each 4bit segment to a 6bit segment\
# essentially, we are using the previous output of the sbox to locate the previous coordinates\
# however, since multiple coordinates correspond to the same value in our original sbox\
# there are multiple possibilities that this function can output.\
# it would be impossible to figure out which one is correct, so for simplicity i have chosen a random one\
# HOWEVER THIS IS MEANS THAT THE DECRYPTION WILL NOT WORK\
#This is a flaw with this encryption model we used from the document, and therefore is not able to be decrypted by running the cypher text back through the algorithm\
def inverse_sbox_segment(sbox, sbox_output):\
    bin_to_dec = int(sbox_output, 2)\
    for row in range(4):\
        for col in range(16):\
            if sbox[row][col] == bin_to_dec:\
                row_bin = f'\{row:02b\}'\
                col_bin = f'\{col:04b\}'\
                input_value = row_bin[0] + col_bin + row_bin[1]\
                return input_value  \
\
#here we run each 4 bit segment through our inverse sboxes utilixing the above function\
def four_bit_segments_through_sboxes(segments):\
    six_bit_segs = []\
    for seg in segments:\
        segs_lists = []\
        for piece in seg:\
            split_segment = [piece[i:i+4] for i in range(0, len(piece), 4)]\
            sbox_num = 0\
            sbox_list = []\
            for split in split_segment:\
                sbox = inverse_sboxes[sbox_num]\
                x = inverse_sbox_segment(sbox, split)\
                sbox_list += [x]\
            segs_lists += [sbox_list]\
        six_bit_segs += [segs_lists]\
    return six_bit_segs\
\
# here, we simply combine out 6 bit segments into 48 bit segments\
def six_bit_segs_to_fourty_eight(segments):\
    for i in range(len(segments)):\
        for j in range(len(segments[i])):\
            six_bit = ''.join(segments[i][j])\
            segments[i][j] = six_bit\
    return segments\
\
#here, we use an inverse expansion table to transform out 48 bit segments back into their\
#32 bit segments. This simply works by mapping them back to their original positions\
def inverse_expansion(expanded_list):\
    inverse_expansion_table = [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, \
    17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30,\
    0, 7, 8, 15, 16, 23, 24, 31]\
\
    inv_exp_seg = []\
    for i in expanded_list:\
        result = []\
        for expanded_data in i:\
            original_data = ['0'] * len(inverse_expansion_table)\
            for i, original_pos in enumerate(inverse_expansion_table):\
                original_data[original_pos] = expanded_data[i]\
            result += [''.join(original_data)]\
        inv_exp_seg += [result]\
    return inv_exp_seg}